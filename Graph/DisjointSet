public class DisjointSet {
    private int[] size;
    private int[] parent;
    private int[] edge;
    private int components;

    public DisjointSet(int s) {
        size = new int[s + 1];
        parent = new int[s + 1];
        edge = new int[s + 1];
        components = s;

        Arrays.fill(size, 1); 
        Arrays.fill(edge, 0); 

        for (int i = 0; i <= s; i++) {
            parent[i] = i;
        }
    }

    public int findUPar(int node) {
        if (parent[node] == node) {
            return node;
        }
        return parent[node] = findUPar(parent[node]);
    }

    // Get the number of edges in the component containing the node
    public int getEdges(int node) {
        return edge[findUPar(node)];
    }

    // Get the size of the component containing the node
    public int getSizes(int node) {
        return size[findUPar(node)];
    }

    public int getComponents(){
        return components;
    }

    public void unionBySize(int u, int v) {
        int Uparu = findUPar(u);
        int Uparv = findUPar(v);

        if (Uparu == Uparv) {
            edge[Uparu]++; // already connected, increment edge count
            return;
        }

        if (size[Uparu] < size[Uparv]) {
            parent[Uparu] = Uparv;
            size[Uparv] += size[Uparu];
            edge[Uparv] += edge[Uparu] + 1;
        } else {
            parent[Uparv] = Uparu;
            size[Uparu] += size[Uparv];
            edge[Uparu] += edge[Uparv] + 1;
        }
        components--;
    }
}
